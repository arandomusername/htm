import random
import region

class dendrit():
    permanenz     = 0
    ziel_pos      = ()

    def __init__(self,zi_pos):
	self.ziel_pos      = zi_pos

class dendritsegment():
    ursprungs_position = ()
    dendrite           = []

    def __init__(self,ur_pos):
	self.ursprungs_position = ur_pos

    def initialize_distrale_dendriten(self,reg_groesse):
        anzahl_kolloumnen      = reg_class.region.coll_groesse
	gesamt_anzahl_neuronen = (reg_groesse ** 2) * anzahl_kolloumnen
	anzahl_dendrite        = (gesamt_anzahl_neuronen/4) -(gesamt_anzahl_neuronen % 4)
	self.dendrite_hinzufuegen(3,anzahl_dendrite,reg_groesse)

    def initialize_proximale_dendriten(self,input_groesse):
	input_gesamt = input_groesse ** 2
	anzahl_dendrite        = (input_gesamt/2) -(input_gesamt % 2)
	self.dendrite_hinzufuegen(2,anzahl_dendrite,input_groesse)

    def dendrite_hinzufuegen(self,dim,anzahl_dendrite,bereich):
	for x in range(0,anzahl_dendrite):
	    test = False

	    while not test :
	    	x_pos = random.randrange(0,bereich)
	    	y_pos = random.randrange(0,bereich)

		if dim == 3:
    	    	    z_pos = random.randrange(0,reg_class.region.coll_groesse)
            	    pos   = (x_pos,y_pos,z_pos)

		else:
		    pos   = (x_pos,y_pos)

                if pos not in self.dendrite:
		    self.dendrite.append(pos)
		    test = Trueclas
